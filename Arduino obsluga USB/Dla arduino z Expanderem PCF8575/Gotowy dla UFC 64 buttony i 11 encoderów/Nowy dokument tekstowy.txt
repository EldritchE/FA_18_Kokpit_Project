//BUTTON BOX 
//USE w ProMicro
//Tested in WIN10 + Assetto Corsa
//AMSTUDIO
//20.8.17

#include <Keypad_I2C.h>
#include <Keypad.h>        
#include <Wire.h>
#include <Joystick.h>
#include "Arduino.h"
#include "PCF8575.h"
#define ENABLE_PULLUPS
#define NUMROTARIES1 17
#define NUMBUTTONS1 64

#define NUMROWS1 8
#define NUMCOLS1 8

// #define NUMROWS2 8
// #define NUMCOLS2 8


byte buttons1[NUMROWS1][NUMCOLS1] = {
  {0,1,2,3,4,5,6,7},
  {8,9,10,11,12,13,14,15},
  {16,17,18,19,20,21,22,23},
  {24,25,26,27,28,29,30,31},
  {32,33,34,35,36,37,38,39},
  {40,41,42,43,44,45,46,47,},
  {48,49,50.51,52,53,54,55},
  {56,57,58,59,60,61,62,63,}
};

// byte buttons2[NUMROWS2][NUMCOLS2] = {
//   // {0,1,2,3,4,5,6,7},
//   // {8,9,10,11,12,13,14,15},
//   // {16,17,18,19,20,21,22,23},
//   // {24,25,26,27,28,29,30,31},
//   // {32,33,34,35,36,37,38,39},
//   // {40,41,42,43,44,45,46,47,},
//   // {48,49,50.51,52,53,54,55},
//   // {56,57,58,59,60,61,62,63,}
//   {100,101,102,103,104,105,106,107},
//   {108,109,110,111,112,113,114,115},
//   {116,117,118,119,120,121,122,123},
//   {124,125,126,127,128,129,130,131},
//   {132,133,134,135,136,137,138,139},
//   {140,141,142,143,144,145,146,147,},
//   {148,149,150.151,152,153,154,155},
//   {156,157,158,159,160,161,162,163,}
// };


struct rotariesdef {
  byte pin1;
  byte pin2;
  int ccwchar;
  int cwchar;
  volatile unsigned char state;
};

rotariesdef rotaries1[NUMROTARIES1] {
  {0,1,66,67,0},
  {1,4,68,69,0},
  {4,5,70,71,0},
  {5,6,72,73,0},
  {6,7,74,75,0},
  {7,8,76,77,0},
  {8,9,78,79,0},
  {9,10,80,81,0},
  {10,11,82,83,0},
  {11,12,84,85,0},
  {12,13,86,87,0},
  {13,18,88,89,0},
  {18,19,90,91,0},
  {19,20,92,93,0},
  {20,21,94,95,0},
  {21,22,96,97,0},
  {22,23,98,99,0}
};

#define DIR_CCW 0x10
#define DIR_CW 0x20
#define R_START 0x0

#ifdef HALF_STEP
#define R_CCW_BEGIN 0x1
#define R_CW_BEGIN 0x2
#define R_START_M 0x3
#define R_CW_BEGIN_M 0x4
#define R_CCW_BEGIN_M 0x5
const unsigned char ttable[6][4] = {
  // R_START (00)
  {R_START_M,            R_CW_BEGIN,     R_CCW_BEGIN,  R_START},
  // R_CCW_BEGIN
  {R_START_M | DIR_CCW, R_START,        R_CCW_BEGIN,  R_START},
  // R_CW_BEGIN
  {R_START_M | DIR_CW,  R_CW_BEGIN,     R_START,      R_START},
  // R_START_M (11)
  {R_START_M,            R_CCW_BEGIN_M,  R_CW_BEGIN_M, R_START},
  // R_CW_BEGIN_M
  {R_START_M,            R_START_M,      R_CW_BEGIN_M, R_START | DIR_CW},
  // R_CCW_BEGIN_M
  {R_START_M,            R_CCW_BEGIN_M,  R_START_M,    R_START | DIR_CCW},
};
#else
#define R_CW_FINAL 0x1
#define R_CW_BEGIN 0x2
#define R_CW_NEXT 0x3
#define R_CCW_BEGIN 0x4
#define R_CCW_FINAL 0x5
#define R_CCW_NEXT 0x6
#define I2CADDR1 0x20
// #define I2CADDR2 0x21
const unsigned char ttable[7][4] = {
  // R_START
  {R_START,    R_CW_BEGIN,  R_CCW_BEGIN, R_START},
  // R_CW_FINAL
  {R_CW_NEXT,  R_START,     R_CW_FINAL,  R_START | DIR_CW},
  // R_CW_BEGIN
  {R_CW_NEXT,  R_CW_BEGIN,  R_START,     R_START},
  // R_CW_NEXT
  {R_CW_NEXT,  R_CW_BEGIN,  R_CW_FINAL,  R_START},
  // R_CCW_BEGIN
  {R_CCW_NEXT, R_START,     R_CCW_BEGIN, R_START},
  // R_CCW_FINAL
  {R_CCW_NEXT, R_CCW_FINAL, R_START,     R_START | DIR_CCW},
  // R_CCW_NEXT
  {R_CCW_NEXT, R_CCW_FINAL, R_CCW_BEGIN, R_START},
};
#endif

byte rowPins1[NUMROWS1] = {15,14,13,12,11,10,9,8}; 
byte colPins1[NUMCOLS1] = {7,6,5,4,3,2,1,0}; 
Keypad_I2C buttbx1 = Keypad_I2C( makeKeymap(buttons1), rowPins1, colPins1, NUMROWS1, NUMCOLS1,I2CADDR1,PCF8575_I2C); 

// byte rowPins2[NUMROWS2] = {15,14,13,12,11,10,9,8}; 
// byte colPins2[NUMCOLS2] = {7,6,5,4,3,2,1,0}; 
// Keypad_I2C buttbx2 = Keypad_I2C( makeKeymap(buttons2), rowPins2, colPins2, NUMROWS2, NUMCOLS2,I2CADDR2,PCF8575_I2C);


Joystick_ Joystick(JOYSTICK_DEFAULT_REPORT_ID, 
  JOYSTICK_TYPE_JOYSTICK, 100, 0,
  false, false, false, false, false, false,
  false, false, false, false, false);

void setup() {
  Joystick.begin();
  Wire.begin( );                // GDY200622
 buttbx1.begin();
  rotary_init1();}

void loop() { 

  CheckAllEncoders1();

  CheckAllButtons1();


}

void CheckAllButtons1(void) {
      if (buttbx1.getKeys() )
    {
       for (int i=0; i<LIST_MAX; i++)   
        {
           if ( buttbx1.key[i].stateChanged )   
            {
            switch (buttbx1.key[i].kstate) {  
                    case PRESSED:
                    case HOLD:
                              Joystick.setButton(buttbx1.key[i].kchar, 1);
                              break;
                    case RELEASED:
                    case IDLE:
                              Joystick.setButton(buttbx1.key[i].kchar, 0);
                              break;
                              
                              
            }
           } 

        
         }


     }
}




void rotary_init1() {
  for (int i=0;i<NUMROTARIES1;i++) {
    pinMode(rotaries1[i].pin1, INPUT);
    pinMode(rotaries1[i].pin2, INPUT);
    #ifdef ENABLE_PULLUPS
      digitalWrite(rotaries1[i].pin1, HIGH);
      digitalWrite(rotaries1[i].pin2, HIGH);
    #endif
  }
}


unsigned char rotary_process(int _i) {
   unsigned char pinstate = (digitalRead(rotaries1[_i].pin2) << 1) | digitalRead(rotaries1[_i].pin1);
  rotaries1[_i].state = ttable[rotaries1[_i].state & 0xf][pinstate];
  return (rotaries1[_i].state & 0x30);
}

void CheckAllEncoders1(void) {
  for (int i=0;i<NUMROTARIES1;i++) {
    unsigned char result = rotary_process(i);
    if (result == DIR_CCW) {
      Joystick.setButton(rotaries1[i].ccwchar, 1); delay(100); Joystick.setButton(rotaries1[i].ccwchar, 0);
    };
    if (result == DIR_CW) {
      Joystick.setButton(rotaries1[i].cwchar, 1); delay(100); Joystick.setButton(rotaries1[i].cwchar, 0);
    };
  }
}